<template>
  <body>
    <header class="header">
      <div class="logo">
        <img src="../../img/Logo.png" alt="Usuário">
      </div>
      <nav class="nav">
        <ul>
          <li><router-link to="/HomePage">Home</router-link></li>
          <li><router-link to="/Produtos">Produtos</router-link></li>
          <li><router-link to="/Contato">Contato</router-link></li>
          <li><router-link to="/Sobre Nós">Sobre Nós</router-link></li>
          <li>
            <router-link to="/Carrinho">
              <div class="icon"><img src="../../img/carrinho.png" alt="Carrinho"></div>
            </router-link>
          </li>
        </ul>
      </nav>

      <router-link to="/Login">
        <div class="icons"><img src="../../img/user.png" alt="Usuario"></div>
      </router-link>
    </header>

    <div class="cart-container">
      <h2>Itens no Carrinho</h2>

      <div v-if="cartItems.length === 0" class="empty-cart">
        <p>Seu carrinho está vazio!</p>
      </div>

      <div v-else class="cart-items">
        <div v-for="item in cartItems" :key="item.id" class="cart-item">
          <img :src="item.image" alt="Imagem do Produto" class="cart-item-image"/>
          <div class="cart-item-details">
            <h3>{{ item.name }}</h3>
            <p><strong>Preço:</strong> {{ formatPrice(item.preco) }}</p>
          </div>

          <div class="cart-item-footer">
            <div class="quantity-control">
              <button @click="changeQuantity(item.id, -1)" :disabled="item.quantity <= 1">-</button>
              <span>{{ item.quantity }}</span>
              <button @click="changeQuantity(item.id, 1)">+</button>
            </div>
            <div class="checkbox">
              <input 
                type="checkbox" 
                :id="'item-' + item.id" 
                v-model="item.selected"
                @change="updateTotalPrice" 
              />
              <label :for="'item-' + item.id">Selecionar</label>
            </div>
          </div>
        </div>

        <div class="total">
          <p><strong>Total:</strong> {{ formatPrice(totalPrice) }}</p>
        </div>

        <div v-if="purchaseMessage" class="purchase-message">
          <p>{{ purchaseMessage }}</p>
        </div>

        <div class="buttons-container">
          <div class="delete-button">
            <button 
              @click="deleteSelectedItems"
              :disabled="!hasSelectedItems"
              :class="{'disabled': !hasSelectedItems}"
            >
              Excluir Itens Selecionados
            </button>
          </div>

          <div class="purchase-button">
            <button 
              @click="handlePurchase" 
              :disabled="!hasSelectedItems"
              :class="{'disabled': !hasSelectedItems}"
            >
              Finalizar Compra
            </button>
          </div>
        </div>
      </div>
    </div>
  </body>
</template>

<script>
// Importando funções e métodos necessários do Firebase
import { getAuth } from "firebase/auth";
import { getFirestore, collection, addDoc, query, where, getDocs, doc, updateDoc, deleteDoc, Timestamp } from "firebase/firestore";  // Corrigido com importações do Firestore
import { v4 as uuidv4 } from 'uuid'; // Para gerar ID único para o pedido

export default {
  data() {
    return {
      cartItems: [], 
      totalPrice: 0,
      purchaseMessage: '',  // Nova propriedade para a mensagem de compra
    };
  },
  computed: {
    hasSelectedItems() {
      return this.cartItems.some(item => item.selected); 
    },
  },
  mounted() {
    this.fetchCartItems(); 
  },
  methods: {
    async fetchCartItems() {
      const user = getAuth().currentUser; 

      if (user) {
        try {
          const firestore = getFirestore(); 

          // Query para pegar os itens do carrinho do usuário
          const cartQuery = query(
            collection(firestore, "Carrinho"),
            where("userId", "==", user.uid)
          );
          const querySnapshot = await getDocs(cartQuery);

          this.cartItems = [];

          querySnapshot.forEach((doc) => {
            const item = doc.data();

            // O preço é um número no Firestore, então simplesmente pegamos ele
            const preco = item.preco;

            this.cartItems.push({
              id: doc.id,
              name: item.name,
              preco: preco, 
              image: item.image,
              quantity: item.quantity || 1,
              selected: false, 
            });
          });

          this.calculateTotal();

        } catch (error) {
          console.error("Erro ao buscar os itens do carrinho:", error);
          this.cartItems = [];
        }
      } else {
        this.cartItems = []; 
      }
    },

    calculateTotal() {
      this.totalPrice = this.cartItems.reduce((acc, item) => {
        if (item.selected) {
          return acc + (item.preco * item.quantity); 
        }
        return acc;
      }, 0);
    },

    updateTotalPrice() {
      this.calculateTotal(); 
    },

    changeQuantity(itemId, change) {
      const item = this.cartItems.find(i => i.id === itemId);

      if (item) {
        item.quantity += change;
        if (item.quantity < 1) item.quantity = 1; 

        this.calculateTotal();
        this.updateCartItemQuantity(itemId, item.quantity);
      }
    },

    async updateCartItemQuantity(itemId, quantity) {
      const firestore = getFirestore();
      const itemRef = doc(firestore, "Carrinho", itemId);

      try {
        await updateDoc(itemRef, {
          quantity: quantity,
        });
      } catch (error) {
        console.error("Erro ao atualizar a quantidade no Firestore:", error);
      }
    },

    async deleteSelectedItems() {
      const selectedItems = this.cartItems.filter(item => item.selected);

      if (selectedItems.length > 0) {
        const firestore = getFirestore();
        for (let item of selectedItems) {
          const itemRef = doc(firestore, "Carrinho", item.id);
          await deleteDoc(itemRef);
        }

        this.fetchCartItems();
      }
    },

    formatPrice(price) {
      if (typeof price !== "number" || isNaN(price)) {
        return "R$ 0,00"; 
      }

      return "R$ " + price.toFixed(2).replace(".", ","); 
    },

    async handlePurchase() {
      const selectedItems = this.cartItems.filter(item => item.selected);

      if (selectedItems.length > 0) {
        const user = getAuth().currentUser;

        if (user) {
          // Gerar um número único para o pedido
          const orderNumber = uuidv4(); 

          // Verificando se todos os campos estão preenchidos
          const orderData = {
            orderNumber,
            userId: user.uid,
            customerName: user.displayName || 'Anônimo',  // Garantir que 'customerName' tenha valor
            customerEmail: user.email,  // Verificar se o 'email' do usuário existe
            items: selectedItems.map(item => ({
              name: item.name || 'Sem nome',  // Garantir que o nome esteja preenchido
              quantity: item.quantity || 1,   // Garantir que a quantidade esteja preenchida
              price: item.preco || 0,         // Garantir que o preço esteja preenchido
              total: (item.preco || 0) * (item.quantity || 1),  // Calcular o total, mesmo que esteja indefinido
            })),
            totalPrice: this.totalPrice || 0,  // Garantir que o totalPrice tenha valor
            status: 'Em Processamento',  // Valor fixo
            date: Timestamp.fromDate(new Date()),  // A data atual
          };

          // Verificar se algum campo importante está indefinido antes de enviar
          if (!orderData.customerEmail || !orderData.customerName) {
            alert("Informações de cliente estão incompletas.");
            return;
          }

          try {
            const firestore = getFirestore();
            // Adicionar o pedido no Firestore
            await addDoc(collection(firestore, "Pedidos"), orderData);

            // Exibe a mensagem de sucesso
            this.purchaseMessage = "Compra feita com sucesso!";

            // Redireciona para a página de confirmação
            setTimeout(() => {
              this.purchaseMessage = '';
              this.$router.push({ name: 'CompraConfirmada', params: { orderNumber } });
            }, 2000);

          } catch (error) {
            console.error("Erro ao adicionar pedido ao Firestore:", error);
            alert("Erro ao finalizar a compra.");
          }
        }
      } else {
        alert("Nenhum item selecionado para compra.");
      }
    },
  },
};
</script>

<style scoped>
/* Seu código de estilo aqui */
</style>
